/***********************************************************************\
| Module:              bit_synchronizer
| Author:              Alex Hare
| Last Updated:        01/29/2021
| Function:            Synchronizes to when a packet is recieved. Will
|                      detect incoming packets
| Inputs:              
| Output: enable_demodulator - 
|                 symbol_clk - 
|                       addr - output address with the highest peak
|                              sent to temp buffer to work out where
|                              the data is
|
|             
| Additional comments: Largely based on Benson, B. "Design of a Low-Cost 
|                      Underwater Acoustic Modem for Short-Range Sensor 
|                      Networks", UC San Diego, 2010
\***********************************************************************/
module findIndex(
	input wire clk,
	input wire demod_clk,
	input wire signed [7:0] ref_corr,
	input wire signed [15:0] threshold,
	output reg enable_demodulator,
	output reg enable_symbol_clk,
	output reg symbol_clk,
	output reg [7:0] index,
	output reg addr
);

parameter REFERNCE_LENGTH = 31;
parameter NUM_SAMPLES     = 62;
parameter DOWN_SAMPLE_FACTOR = 1;

reg [7:0] ref_length_count; // how many bits into the refrence
reg [7:0] symbol_num_count; // number of demodulated bits
reg [1:0] symbol_clk_count; // down sampled clk
reg [7:0] peak_size; // Keeps track of the largest peak
//reg [7:0] index;
reg rst_symbol_clk;
reg rst_symbol_count;
reg completion;

reg first_peak;
reg start_ref_count;

initial begin
	ref_length_count   <= 8'b0;
	symbol_num_count   <= 8'b0;
	symbol_clk_count   <= 2'b0;
	peak_size          <= 8'b0;
	index              <= 8'b0;
	rst_symbol_clk     <= 1'b0;
	rst_symbol_count   <= 1'b0;
   completion         <= 1'b0;
	first_peak         <= 1'b0;
	start_ref_count    <= 1'b0;
	enable_demodulator <= 1'b0;
	enable_symbol_clk  <= 1'b0;
	symbol_clk         <= 1'b0;
end
	
always @ (posedge clk) begin
	// Reset signal after the
	if(completion == 1'b1) begin
		start_ref_count    <= 1'b0;
		enable_demodulator <= 1'b0;
		first_peak         <= 1'b0;
	end
	// If the refrence correlation is greater than the threshold, this is
	// a peak and should set the index to the current symbol_num_count.
	// If this is the first peak then it starts the symbol_num_count
	
	if(ref_corr > threshold) begin
		if(first_peak == 1'b0) begin
			index              <= 8'b0;
			start_ref_count    <= 1'b1;
			enable_demodulator <= 1'b1;
			rst_symbol_clk     <= 1'b1;
			first_peak         <= 1'b1;
			peak_size          <= ref_corr;
		end
		else if(ref_corr > peak_size) begin
			// if a new peak that is bigger than the previous bigger peak
			peak_size          <= ref_corr;
			index              <= ref_length_count;
			rst_symbol_count   <= 1'b1;
		end
	end
	
	// Symbol Clock
	if(rst_symbol_clk == 1'b1) begin
		symbol_clk_count <= 2'b1;
	end
	if(symbol_clk_count < (2'b1*DOWN_SAMPLE_FACTOR)) begin
		symbol_clk_count <= symbol_clk_count + 2'b1;
	end
	else begin
		symbol_clk_count <= 2'b0;
		if(symbol_clk == 1'b1) begin
			symbol_clk <= 1'b0;
		end else begin
			symbol_clk <= 1'b0;
		end
	end
	
end

always @ (negedge clk) begin
	if(completion == 1'b1) begin
		ref_length_count <= 8'b0;
	end

	// Counter to keep track of where we are in the
	// reference length
	if(start_ref_count == 1'b1) begin
		if(ref_length_count < (8'd2*REFERNCE_LENGTH*DOWN_SAMPLE_FACTOR)) begin
			ref_length_count   <= ref_length_count + 8'b1; 
			
		end else begin
			addr       <= 8'd255 - ((NUM_SAMPLES - 1 - index)/DOWN_SAMPLE_FACTOR);// Calculate addr at the end of two refernce lengths
			ref_length_count   <= 8'b0;
		end
	end	
end
	
// Need a counter based on the clock the demod uses that can then count the number of bits
// that have been demodulated. This can then reset the findIndex module
reg [7:0] demod_cnt = 8'b0; // Counts up to Packet size + an extra reference length, 224 + 31 = 255
always @ (posedge demod_clk) begin
	if(enable_demodulator == 1'b1) begin
		if(demod_cnt == 8'd255) begin
			// The packet is now demodulated and should be in the temperary buffer
			// enable the completion bit to reset the bit synch for next packet
			// and reset the demod_cnt
			completion <= 1'b1;
			demod_cnt  <= 8'b0;
			
		end 
		else begin
			demod_cnt  <= demod_cnt + 1'b1;
		end
	end	
end
	
endmodule
